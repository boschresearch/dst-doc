@startuml seq_node_bc_user
Title Sequence Diagram - Interaction amongst node, blockchain and user.

box "Alice"
actor alice
entity "Alice's\nPerun Node" as alice_node
endbox

entity "Blockchain" as blockchain

box "Bob"
entity "Bob's\nPerun Node" as bob_node
' actor bob
endbox


skinparam sequence {
    messageAlign center
    ArrowThickness 2
    BoxBorderColor Sienna
    BoxBackgroundColor SeaShell
    GroupBodyBackgroundColor transparent
    NoteTextAlignment center
    DefaultTextAlignment center
}
hide footbox

group Establish Session
alice [#DarkBlue]-> alice_node:New Session\n<NewSessionRequest>
alice <-[#DarkBlue] alice_node:New Session\n<NewSessionResponse>
'group
end

group OPEN PHASE
group Open Channel
alice [#DarkBlue]-> alice_node: Send Channel Proposal\n<SendChannelProposalRequest>
alice_node [#DarkOliveGreen]-> bob_node: New Channel\nNewChannelRequest>
alice_node <-[#DarkOliveGreen] bob_node: New Channel\n<NewChannelResponse>
alice_node [#Crimson]-> blockchain: Fund Channel
blockchain <-[#Crimson] bob_node: Fund Channel
alice_node <-[#Fuchsia] blockchain: Channel Funded
blockchain [#Fuchsia]-> bob_node: Channel Funded
alice <-[#DarkBlue] alice_node: Send Channel\n<ChannelProposalResponse>
'group
end

group Incoming Request
alice_node <-[#DarkOliveGreen] bob_node: Channel\nNewChannelRequest>
' Channel can be ready or go error after this user accepts... because funding happens later.
' Maybe maintain a funding failed channels list, check in it and return special error.
alice <-[#DarkBlue] alice_node: Channel Proposal Notification\n<ChannelProposalNotification>
...
alice [#DarkBlue]-> alice_node: Receive Channel Propoal\n<ReceiveChannelProposalRequest>
alice_node [#DarkOliveGreen]-> bob_node: New Channel\n<NewChannelResponse>
alice_node [#Crimson]-> blockchain: Fund Channel
blockchain <-[#Crimson] bob_node: Fund Channel
alice_node <-[#Fuchsia] blockchain: Channel Funded
blockchain [#Fuchsia]-> bob_node: Channel Funded
alice <-[#DarkBlue] alice_node: Receive Channel Proposal\n<ChannelProposalResponse>
'group
end
'group
end

group TRANSACT PHASE
group Transact: Send Payment
alice [#DarkBlue]-> alice_node: Send Payment\n<SendPaymentRequest>
alice_node [#DarkOliveGreen]-> bob_node: Channel Update\n<ChannelUpdateRequest>
alice_node <-[#DarkOliveGreen] bob_node: Channel Update\n<ChannelUpdateResponse>
alice <-[#DarkBlue] alice_node: Send Payment\n<PaymentResponse>
'group
end

group Transact: Receive Payment
alice_node <-[#DarkOliveGreen] bob_node: Channel Update\n<ChannelUpdateRequest>
alice <-[#DarkBlue] alice_node: Receive Payment\n<PaymentNotification>
...
alice [#DarkBlue]-> alice_node: Receive Payment\n<ReceivePaymentRequest>
alice_node [#DarkOliveGreen]-> bob_node: Channel Update\n<ChannelUpdateResponse>
alice <-[#DarkBlue] alice_node: Receive Payment\n<PaymentResponse>
'group
end
'group
end

group SETTLE PHASE
group Close Channel: Collaborative & Non Collaborative
alice [#DarkBlue]-> alice_node: Close Channel\n<CloseChannelRequest>
alice_node [#DarkOliveGreen]-> bob_node: Final Channel Update \n<FinalChannelUpdateRequest>
opt response 
alice_node <-[#DarkOliveGreen] bob_node: Final Channel Update \n<FinalChannelUpdateResponse>
'opt
end
alt if response == success (Collaborative)
alice_node [#Crimson]-> blockchain: Settle (Final State)
else if response == error (Non Collaborative)
alice_node [#Crimson]-> blockchain: State Register
alice_node <-[#Fuchsia] blockchain: State Registered
blockchain [#Fuchsia]-> bob_node: State Registered
alice_node [#Crimson]-> blockchain: Settle
'if
end
alice_node <-[#Fuchsia] blockchain: Channel Settled
blockchain [#Fuchsia]-> bob_node : Channel Settled
opt if reponse = error (Non Collaborative)
alice_node [#Fuchsia]->alice_node: Wait Challenge\nDuration
' opt
end
alice_node [#Crimson]-> blockchain: Withdraw Funds
blockchain <-[#Crimson] bob_node: Withdraw Funds 
alice <-[#DarkBlue] alice_node: Close Channel\n<CloseChannelResponse>
'group
end

group Channel Dispute: Invalid State Registered
blockchain <-[#Crimson] bob_node: State Register (Invalid)
alice_node <-[#Fuchsia] blockchain: State Registered
alice_node [#Fuchsia]-> alice_node: Invalid State Registered
alice_node [#Crimson]-> blockchain: State Register (Latest)
alice_node <[#Fuchsia]- blockchain: State Registered
blockchain [#Fuchsia]-> bob_node: State Registered
...
Note over blockchain
Channel Timeout
endnote
...
alice_node [#Crimson]-> blockchain: Settle
alice_node [#Crimson]-> blockchain: Withdraw Funds
blockchain <-[#Crimson] bob_node: Withdraw Funds
alice <-[#DarkBlue] alice_node: Channel Closed\n<ChannelClosedNotification>
'group
end
'group
end

@enduml
